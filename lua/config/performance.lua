-- ============================================================================
-- 性能优化配置 - 提升 Neovim 响应速度和整体效能
-- ============================================================================

-- LSP 诊断配置优化：减少不必要的诊断更新，提升编辑流畅度
local config = {
  -- 禁用虚拟文本显示诊断信息（通过悬停浮窗显示代替），减少 UI 干扰
  virtual_text = false,
  -- 保留下划线来标记诊断位置，保持视觉反馈
  underline = true,
  -- 浮窗显示诊断详情配置
  float = {
    border = "rounded",      -- 圆形边框美观性
    source = "always",       -- 显示诊断来源便于理解
  },
  -- 按严重程度排序诊断，优先显示错误而非警告
  severity_sort = true,
  -- 在代码行左侧显示诊断图标
  signs = true,
  -- 关键优化：不在插入模式下更新诊断，避免输入时卡顿
  update_in_insert = false,
}

-- 应用 LSP 诊断配置到全局
vim.diagnostic.config(config)

-- ============================================================================
-- 补全菜单优化：加快补全菜单响应速度
-- ============================================================================
-- 补全选项配置：只显示菜单，不自动选择第一项（需要显式选择）
vim.opt.completeopt = { "menu", "menuone", "noselect" }
-- 限制补全菜单最多显示 10 行，减少渲染开销
vim.opt.pumheight = 10

-- ============================================================================
-- LSP 诊断消息处理优化：自定义诊断发布处理逻辑
-- ============================================================================
-- 拦截 LSP 服务器发送的诊断消息，应用优化配置
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics,
  {
    underline = true,              -- 保留下划线标记
    virtual_text = false,          -- 不显示虚拟文本，减少干扰
    signs = true,                  -- 保留行号左侧的诊断图标
    update_in_insert = false,      -- 不在插入模式更新诊断
  }
)

-- ============================================================================
-- 补全提供商优化：禁用不必要的补全提供商，加快补全速度
-- ============================================================================
-- 关闭 node 和 eval 提供商可以显著加快补全响应速度
local disabled_providers = {
  "node",    -- 禁用 Node.js 补全提供商
  "eval",    -- 禁用 eval 表达式补全
}

-- 逐一禁用补全提供商
for _, provider in ipairs(disabled_providers) do
  vim.g["completion_" .. provider .. "_enable"] = 0
end

-- ============================================================================
-- Lua 模块缓存优化：使用字节码缓存加速启动
-- ============================================================================
-- 此优化只在 Neovim 0.9+ 版本有效
if vim.loader then
  -- 启用 Lua 字节码编译缓存
  -- 作用：避免每次启动都重新解析 Lua 代码，直接使用编译后的字节码
  -- 预期性能提升：启动速度快 20-30%
  vim.loader.enable()
end

-- ============================================================================
-- 折叠功能性能优化：配置折叠行为
-- ============================================================================
-- 使用缩进级别进行自动折叠
vim.opt.foldmethod = "indent"
-- 设置初始折叠级别为 99（基本不折叠，提高初始加载速度）
vim.opt.foldlevel = 99
-- 新打开的文件不自动折叠，提升初始体验
vim.opt.foldlevelstart = 99

-- ============================================================================
-- 可选：交换文件和备份文件优化
-- ============================================================================
-- 以下设置被注释，可按需启用：
-- vim.opt.swapfile = false      -- 禁用交换文件（风险高，不推荐）
-- vim.opt.backup = false        -- 禁用备份文件
-- vim.opt.undofile = true       -- 启用撤销历史持久化

return {}
